# ls
# set default flags
if grep --color=auto --quiet "" "$HOME"/.bashrc >/dev/null 2>&1
then
  alias grep='grep --color=auto'
fi

if ls --color=never --directory / >/dev/null 2>&1
then
  # enable colors with GNU ls
  alias ls='ls --color=auto'
  alias l='ls -lAh --group-directories-first --color=auto'
else
  alias ls='ls -F'
  alias l='ls -lAh'
fi

# Extract anything
extract () {
    if [ -f $1 ] ; then
      case $1 in
        *.tar.bz2)   tar xjf $1     ;;
        *.tar.gz)    tar xzf $1     ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar e $1     ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar xf $1      ;;
        *.tbz2)      tar xjf $1     ;;
        *.tgz)       tar xzf $1     ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *)     echo "'$1' cannot be extracted via extract()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

# Debian quick update
alias upgrade='apt-get update && apt-get upgrade && apt-get clean'

# Mvim
alias v='mvim'

alias lh='ls -ldh .??*'
alias ll="ls -l"
alias la='ls -A'
alias cl="clear"
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."

# Go back x directories
b() {
    str=""
    count=0
    while [ "$count" -lt "$1" ];
    do
        str=$str"../"
        let count=count+1
    done
    cd $str
}

# changing directory to project
function p { cd ~/Projects/$1; }
# changing directory to code project
function c { cd ~/Code/$1; }
# changing directory to scripts
function s { cd ~/Scripts/$1; }

if [ -n "$(type -t __git_complete)" ] && [ "$(type -t __git_complete)" = function ]; then 
  __git_complete gs _git_status
  __git_complete gc _git_commit
  __git_complete gca _git_commit
  __git_complete gb _git_branch
  __git_complete gco _git_checkout
  __git_complete gm _git_merge
  __git_complete gpl _git_pull
  __git_complete gps _git_push
fi

# Git
alias ga="git add"
alias gaa="git add --all"
alias gc="git commit"
alias gca="git commit -a"
alias gb="git branch"
alias gba="git branch -a"
alias gbd="git branch -d"
alias gco="git checkout"
alias gcob="git checkout -b"
#alias gm="git merge"
alias gr="git rebase"
alias gl="git log"
alias lg='git log --graph --full-history --all --color --pretty=format:"%x1b[31m%h%x09%x1b[32m%d%x1b[0m%x20%s"'
alias glf='git log --pretty=full'
alias gs="git status"
alias gsh="git show"
alias gd="git diff"
alias gbl="git blame"
alias gps="git push"
alias gpl="git pull"
alias grm="git status | grep deleted | awk '{print \$3}' | xargs git rm"

# Ruby
alias r="ruby"
alias i="irb"
alias rk="rake"
alias rkt="rake -T | vim -"
alias b="bundle"
alias be="bundle exec"
alias bi="bundle install"

# Rails
# console
function sc() {
  if [ -x script/rails ]; then
    script/rails console $1
  else
    script/console $1
  fi
}
# server
function ss() {
  if [ -x script/rails ]; then
    thin start $@
  else
    script/server $@
  fi
}
# generator
function sg() {
  if [ -x script/rails ]; then
    script/rails generate $@
  else
    script/generate $@
  fi
}

# other
alias rkdm="rake db:migrate"
alias rkdmr="rake db:migrate:redo"
alias rkdr="rake db:rollback"
alias rkdc="rake db:create"
alias rklc="rake log:clear"
alias rkr="rake routes | vim"


# alternative to "rails" command to use templates
function railsapp {
 appname=$1
 shift 1
 rails new $appname -m https://raw.github.com/RailsApps/rails3-application-templates/master/rails3-devise-rspec-cucumber-template.rb -T
}

#NPM
# npm shortcuts that only list top-level modules
# ! overrides the line-number utility
alias ng="npm list -g --depth=0 2>/dev/null"
alias nl="npm list --depth=0 2>/dev/null"
alias nt="npm test"
alias ns="npm start"

# Start an npm http-server
nserve () {
  http-server "$@";
}



# misc
alias reload='. ~/.bash_profile'

